content='from pydantic import BaseModel, Field, validator\nfrom typing import List, Optional, Dict, Any, Union\nfrom datetime import datetime\nfrom enum import Enum\n\nclass EmbeddingTaskType(str, Enum):\n    RETRIEVAL_DOCUMENT = "RETRIEVAL_DOCUMENT"\n    RETRIEVAL_QUERY = "RETRIEVAL_QUERY"\n\nclass GeminiModel(str, Enum):\n    GEMINI_PRO = "gemini-2.0-flash-exp"\n    GEMINI_EMBEDDING = "models/text-embedding-004"\n\nclass ProjectCreateRequest(BaseModel):\n    title: str = Field(..., min_length=1, max_length=200, description="Project title")\n    description: str = Field(..., min_length=1, max_length=2000, description="Project description")\n    content: str = Field(..., min_length=1, description="Project content")\n    tags: Optional[List[str]] = Field(default=[], description="Project tags")\n    metadata: Optional[Dict[str, Any]] = Field(default={}, description="Additional metadata")\n\n    @validator(\'tags\')\n    def validate_tags(cls, v):\n        if v and len(v) > 10:\n            raise ValueError("Maximum 10 tags allowed")\n        return [tag.strip().lower() for tag in v if tag.strip()]\n\n    @validator(\'title\', \'description\', \'content\')\n    def validate_strings(cls, v):\n        return v.strip()\n\nclass ProjectUpdateRequest(BaseModel):\n    title: Optional[str] = Field(None, min_length=1, max_length=200)\n    description: Optional[str] = Field(None, min_length=1, max_length=2000)\n    content: Optional[str] = Field(None, min_length=1)\n    tags: Optional[List[str]] = Field(None)\n    metadata: Optional[Dict[str, Any]] = Field(None)\n\n    @validator(\'tags\')\n    def validate_tags(cls, v):\n        if v is not None and len(v) > 10:\n            raise ValueError("Maximum 10 tags allowed")\n        return [tag.strip().lower() for tag in v if tag.strip()] if v else v\n\n    @validator(\'title\', \'description\', \'content\')\n    def validate_strings(cls, v):\n        return v.strip() if v else v\n\nclass ProjectResponse(BaseModel):\n    id: str = Field(..., description="Project unique identifier")\n    title: str = Field(..., description="Project title")\n    description: str = Field(..., description="Project description")\n    content: str = Field(..., description="Project content")\n    tags: List[str] = Field(default=[], description="Project tags")\n    metadata: Dict[str, Any] = Field(default={}, description="Additional metadata")\n    created_at: datetime = Field(..., description="Creation timestamp")\n    updated_at: datetime = Field(..., description="Last update timestamp")\n    embedding_vector: Optional[List[float]] = Field(None, description="3072-dimensional embedding vector")\n\nclass SearchRequest(BaseModel):\n    query: str = Field(..., min_length=1, max_length=500, description="Search query")\n    limit: Optional[int] = Field(default=10, ge=1, le=100, description="Maximum number of results")\n    similarity_threshold: Optional[float] = Field(default=0.7, ge=0.0, le=1.0, description="Similarity threshold")\n    include_metadata: Optional[bool] = Field(default=True, description="Include metadata in results")\n    tags_filter: Optional[List[str]] = Field(default=[], description="Filter by tags")\n\n    @validator(\'query\')\n    def validate_query(cls, v):\n        return v.strip()\n\n    @validator(\'tags_filter\')\n    def validate_tags_filter(cls, v):\n        return [tag.strip().lower() for tag in v if tag.strip()] if v else []\n\nclass SearchResult(BaseModel):\n    project: ProjectResponse = Field(..., description="Project data")\n    similarity_score: float = Field(..., ge=0.0, le=1.0, description="Similarity score")\n    matched_tags: List[str] = Field(default=' additional_kwargs={} response_metadata={'id': 'msg_01UzXhEUGAURwgA4Lu5ABHxS', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 409, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--e048e6b4-5b27-42cb-96c0-a3243a88d269-0' usage_metadata={'input_tokens': 409, 'output_tokens': 1024, 'total_tokens': 1433, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}