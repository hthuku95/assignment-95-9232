content='import os\nimport logging\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass\nfrom pathlib import Path\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n@dataclass\nclass ModelConfig:\n    """Configuration for AI models"""\n    name: str\n    max_tokens: int\n    temperature: float\n    embedding_dimensions: Optional[int] = None\n    task_type: Optional[str] = None\n\n@dataclass\nclass DatabaseConfig:\n    """Configuration for database connections"""\n    host: str\n    port: int\n    database: str\n    collection: str\n    username: Optional[str] = None\n    password: Optional[str] = None\n\nclass Settings:\n    """Centralized configuration management"""\n    \n    def __init__(self):\n        self._load_environment_variables()\n        self._setup_model_configurations()\n        self._setup_database_configurations()\n        self._validate_required_settings()\n    \n    def _load_environment_variables(self):\n        """Load environment variables with defaults"""\n        # Google Gemini API Configuration\n        self.GOOGLE_API_KEY = os.getenv(\'GOOGLE_API_KEY\')\n        if not self.GOOGLE_API_KEY:\n            logger.warning("GOOGLE_API_KEY not found in environment variables")\n        \n        # Database Configuration\n        self.DATABASE_HOST = os.getenv(\'DATABASE_HOST\', \'localhost\')\n        self.DATABASE_PORT = int(os.getenv(\'DATABASE_PORT\', \'27017\'))\n        self.DATABASE_NAME = os.getenv(\'DATABASE_NAME\', \'tutor_space\')\n        self.DATABASE_USERNAME = os.getenv(\'DATABASE_USERNAME\')\n        self.DATABASE_PASSWORD = os.getenv(\'DATABASE_PASSWORD\')\n        \n        # Application Configuration\n        self.DEBUG = os.getenv(\'DEBUG\', \'False\').lower() == \'true\'\n        self.LOG_LEVEL = os.getenv(\'LOG_LEVEL\', \'INFO\')\n        self.MAX_RETRIES = int(os.getenv(\'MAX_RETRIES\', \'3\'))\n        self.REQUEST_TIMEOUT = int(os.getenv(\'REQUEST_TIMEOUT\', \'30\'))\n        \n        # Project Specific\n        self.ASSIGNMENT_ID = os.getenv(\'ASSIGNMENT_ID\', \'95\')\n        self.PROJECT_TITLE = os.getenv(\'PROJECT_TITLE\', \'FINAL TEST - All Google Gemini Issues Fixed\')\n    \n    def _setup_model_configurations(self):\n        """Setup model configurations with correct Gemini settings"""\n        self.models = {\n            \'gemini_chat\': ModelConfig(\n                name=\'gemini-2.5-pro\',\n                max_tokens=8192,\n                temperature=0.7\n            ),\n            \'gemini_embedding\': ModelConfig(\n                name=\'models/gemini-embedding-001\',\n                max_tokens=None,\n                temperature=None,\n                embedding_dimensions=3072,\n                task_type=\'RETRIEVAL_DOCUMENT\'\n            ),\n            \'gemini_query_embedding\': ModelConfig(\n                name=\'models/gemini-embedding-001\',\n                max_tokens=None,\n                temperature=None,\n                embedding_dimensions=3072,\n                task_type=\'RETRIEVAL_QUERY\'\n            )\n        }\n    \n    def _setup_database_configurations(self):\n        """Setup database configurations"""\n        self.database = DatabaseConfig(\n            host=self.DATABASE_HOST,\n            port=self.DATABASE_PORT,\n            database=self.DATABASE_NAME,\n            collection=\'tutor_space_projects_3072\',\n            username=self.DATABASE_USERNAME,\n            password=self.DATABASE_PASSWORD\n        )\n        \n        # Alternative collections for different use cases\n        self.collections = {\n            \'projects\': \'tutor_space_projects_3072\',\n            \'embeddings\': \'tutor_space_embeddings_3072\',\n            \'users\': \'tutor_space_users\',\n            \'sessions\': \'tutor_space_sessions\'\n        }\n    \n    def _validate_required_settings(self):\n        """Validate that required settings are present"""\n        required_settings = []\n        \n        if not self.' additional_kwargs={} response_metadata={'id': 'msg_01TGNen2XfyjvAgwb7fVhrRz', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 407, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--6ce46152-5e6b-45c1-b16b-10acd8970bfd-0' usage_metadata={'input_tokens': 407, 'output_tokens': 1024, 'total_tokens': 1431, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}