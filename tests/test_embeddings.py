content='import pytest\nimport numpy as np\nfrom unittest.mock import Mock, patch, MagicMock\nimport google.generativeai as genai\nfrom src.embeddings import EmbeddingGenerator\nfrom src.config import Config\n\n\nclass TestEmbeddingGenerator:\n    """Test suite for EmbeddingGenerator class"""\n    \n    @pytest.fixture\n    def config(self):\n        """Create test configuration"""\n        config = Mock(spec=Config)\n        config.google_api_key = "test_api_key"\n        config.embedding_model = "models/gemini-embedding-001"\n        config.embedding_dimensions = 3072\n        return config\n    \n    @pytest.fixture\n    def embedding_generator(self, config):\n        """Create EmbeddingGenerator instance for testing"""\n        with patch(\'google.generativeai.configure\'):\n            return EmbeddingGenerator(config)\n    \n    def test_init_configures_genai(self, config):\n        """Test that initialization properly configures Google AI"""\n        with patch(\'google.generativeai.configure\') as mock_configure:\n            EmbeddingGenerator(config)\n            mock_configure.assert_called_once_with(api_key="test_api_key")\n    \n    def test_init_sets_model_name(self, config):\n        """Test that initialization sets correct model name"""\n        with patch(\'google.generativeai.configure\'):\n            generator = EmbeddingGenerator(config)\n            assert generator.model_name == "models/gemini-embedding-001"\n    \n    def test_generate_document_embedding_success(self, embedding_generator):\n        """Test successful document embedding generation"""\n        test_text = "This is a test document for embedding generation."\n        mock_embedding = [0.1] * 3072\n        \n        with patch(\'google.generativeai.embed_content\') as mock_embed:\n            mock_embed.return_value = {\'embedding\': mock_embedding}\n            \n            result = embedding_generator.generate_document_embedding(test_text)\n            \n            mock_embed.assert_called_once_with(\n                model="models/gemini-embedding-001",\n                content=test_text,\n                task_type="RETRIEVAL_DOCUMENT"\n            )\n            assert result == mock_embedding\n            assert len(result) == 3072\n    \n    def test_generate_query_embedding_success(self, embedding_generator):\n        """Test successful query embedding generation"""\n        test_query = "What is machine learning?"\n        mock_embedding = [0.2] * 3072\n        \n        with patch(\'google.generativeai.embed_content\') as mock_embed:\n            mock_embed.return_value = {\'embedding\': mock_embedding}\n            \n            result = embedding_generator.generate_query_embedding(test_query)\n            \n            mock_embed.assert_called_once_with(\n                model="models/gemini-embedding-001",\n                content=test_query,\n                task_type="RETRIEVAL_QUERY"\n            )\n            assert result == mock_embedding\n            assert len(result) == 3072\n    \n    def test_generate_document_embedding_with_empty_text(self, embedding_generator):\n        """Test document embedding generation with empty text"""\n        with pytest.raises(ValueError, match="Text cannot be empty"):\n            embedding_generator.generate_document_embedding("")\n    \n    def test_generate_query_embedding_with_empty_text(self, embedding_generator):\n        """Test query embedding generation with empty text"""\n        with pytest.raises(ValueError, match="Query cannot be empty"):\n            embedding_generator.generate_query_embedding("")\n    \n    def test_generate_document_embedding_with_none_text(self, embedding_generator):\n        """Test document embedding generation with None text"""\n        with pytest.raises(ValueError, match="Text cannot be empty"):\n            embedding_generator.generate_document_embedding(None)\n    \n    def test_generate_query_embedding_with_none_text(self, embedding_generator):\n        """Test query embedding generation with None text"""\n        with pytest.raises(ValueError, match="Query cannot be empty"):\n            embedding_generator.generate_query_embedding(None)\n    \n    def test_generate_document_embedding_api_error' additional_kwargs={} response_metadata={'id': 'msg_01P2BhPq2XMpTGXMYRNf7XCg', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 410, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--09f123ad-7d58-46c3-9c7c-c0171b9a824d-0' usage_metadata={'input_tokens': 410, 'output_tokens': 1024, 'total_tokens': 1434, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}