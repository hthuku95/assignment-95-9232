content='import pytest\nimport numpy as np\nfrom unittest.mock import Mock, patch, MagicMock\nimport logging\nfrom typing import List, Dict, Any, Optional\nimport asyncio\n\nfrom src.vector_operations import VectorOperations\nfrom src.exceptions import VectorOperationError, CollectionNotFoundError, EmbeddingError\n\n\nclass TestVectorOperations:\n    """Test suite for vector database operations and collection management."""\n\n    @pytest.fixture\n    def mock_vector_client(self):\n        """Mock vector database client."""\n        mock_client = Mock()\n        mock_client.list_collections.return_value = []\n        mock_client.create_collection.return_value = Mock()\n        mock_client.get_collection.return_value = Mock()\n        mock_client.delete_collection.return_value = True\n        return mock_client\n\n    @pytest.fixture\n    def mock_embedding_service(self):\n        """Mock embedding service."""\n        mock_service = Mock()\n        mock_service.embed_documents.return_value = [\n            [0.1] * 3072,  # 3072 dimensions for gemini-embedding-001\n            [0.2] * 3072\n        ]\n        mock_service.embed_query.return_value = [0.3] * 3072\n        return mock_service\n\n    @pytest.fixture\n    def vector_operations(self, mock_vector_client, mock_embedding_service):\n        """Vector operations instance with mocked dependencies."""\n        with patch(\'src.vector_operations.ChromaClient\', return_value=mock_vector_client):\n            with patch(\'src.vector_operations.EmbeddingService\', return_value=mock_embedding_service):\n                return VectorOperations(\n                    collection_name="tutor_space_projects_3072",\n                    embedding_dimensions=3072\n                )\n\n    def test_init_with_default_parameters(self):\n        """Test initialization with default parameters."""\n        with patch(\'src.vector_operations.ChromaClient\'):\n            with patch(\'src.vector_operations.EmbeddingService\'):\n                vector_ops = VectorOperations()\n                assert vector_ops.collection_name == "tutor_space_projects_3072"\n                assert vector_ops.embedding_dimensions == 3072\n\n    def test_init_with_custom_parameters(self):\n        """Test initialization with custom parameters."""\n        with patch(\'src.vector_operations.ChromaClient\'):\n            with patch(\'src.vector_operations.EmbeddingService\'):\n                vector_ops = VectorOperations(\n                    collection_name="custom_collection",\n                    embedding_dimensions=1536\n                )\n                assert vector_ops.collection_name == "custom_collection"\n                assert vector_ops.embedding_dimensions == 1536\n\n    def test_create_collection_success(self, vector_operations, mock_vector_client):\n        """Test successful collection creation."""\n        mock_collection = Mock()\n        mock_vector_client.create_collection.return_value = mock_collection\n        \n        result = vector_operations.create_collection()\n        \n        assert result is not None\n        mock_vector_client.create_collection.assert_called_once_with(\n            name="tutor_space_projects_3072",\n            metadata={"hnsw:space": "cosine", "dimension": 3072}\n        )\n\n    def test_create_collection_already_exists(self, vector_operations, mock_vector_client):\n        """Test collection creation when collection already exists."""\n        mock_vector_client.create_collection.side_effect = Exception("Collection already exists")\n        mock_vector_client.get_collection.return_value = Mock()\n        \n        result = vector_operations.create_collection()\n        \n        assert result is not None\n        mock_vector_client.get_collection.assert_called_once_with("tutor_space_projects_3072")\n\n    def test_create_collection_failure(self, vector_operations, mock_vector_client):\n        """Test collection creation failure."""\n        mock_vector_client.create_collection.side_effect = Exception("Database error")\n        mock_vector_client.get_collection.side_effect = Exception("Collection not found")\n        \n        with pytest.raises(VectorOperationError):\n            vector' additional_kwargs={} response_metadata={'id': 'msg_011GoC7Sou1qQVRQL4KNagad', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 411, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--6051857f-6aa5-41a3-ace0-09fd215500f7-0' usage_metadata={'input_tokens': 411, 'output_tokens': 1024, 'total_tokens': 1435, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}