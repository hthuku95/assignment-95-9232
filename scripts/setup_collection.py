content='#!/usr/bin/env python3\n"""\nSetup script for initializing the tutor_space_projects_3072 collection.\nThis script creates and configures a new collection for Google Gemini integration\nwith proper embedding dimensions and task types.\n"""\n\nimport os\nimport sys\nimport logging\nfrom typing import Dict, Any, Optional\nimport google.generativeai as genai\nfrom chromadb import Client\nfrom chromadb.config import Settings\nimport chromadb\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\'%(asctime)s - %(levelname)s - %(message)s\',\n    handlers=[\n        logging.FileHandler(\'setup_collection.log\'),\n        logging.StreamHandler(sys.stdout)\n    ]\n)\nlogger = logging.getLogger(__name__)\n\nclass CollectionSetup:\n    """Handles the setup and initialization of the tutor_space_projects_3072 collection."""\n    \n    def __init__(self):\n        """Initialize the collection setup with required configurations."""\n        self.collection_name = "tutor_space_projects_3072"\n        self.embedding_model = "models/gemini-embedding-001"\n        self.embedding_dimension = 3072\n        self.gemini_model = "gemini-2.5-pro"\n        \n        # Initialize clients\n        self.chroma_client = None\n        self.collection = None\n        \n    def validate_environment(self) -> bool:\n        """\n        Validate that all required environment variables are set.\n        \n        Returns:\n            bool: True if environment is valid, False otherwise\n        """\n        required_vars = [\'GOOGLE_API_KEY\']\n        missing_vars = []\n        \n        for var in required_vars:\n            if not os.getenv(var):\n                missing_vars.append(var)\n        \n        if missing_vars:\n            logger.error(f"Missing required environment variables: {missing_vars}")\n            return False\n        \n        logger.info("Environment validation passed")\n        return True\n    \n    def initialize_gemini(self) -> bool:\n        """\n        Initialize Google Gemini API with proper configuration.\n        \n        Returns:\n            bool: True if initialization successful, False otherwise\n        """\n        try:\n            api_key = os.getenv(\'GOOGLE_API_KEY\')\n            genai.configure(api_key=api_key)\n            \n            # Test the connection\n            model = genai.GenerativeModel(self.gemini_model)\n            test_response = model.generate_content("Test connection")\n            \n            logger.info(f"Gemini API initialized successfully with model: {self.gemini_model}")\n            return True\n            \n        except Exception as e:\n            logger.error(f"Failed to initialize Gemini API: {str(e)}")\n            return False\n    \n    def initialize_chroma(self) -> bool:\n        """\n        Initialize ChromaDB client and connection.\n        \n        Returns:\n            bool: True if initialization successful, False otherwise\n        """\n        try:\n            # Initialize ChromaDB client with persistent storage\n            chroma_db_path = os.getenv(\'CHROMA_DB_PATH\', \'./chroma_db\')\n            \n            self.chroma_client = chromadb.PersistentClient(\n                path=chroma_db_path,\n                settings=Settings(\n                    anonymized_telemetry=False,\n                    allow_reset=True\n                )\n            )\n            \n            logger.info(f"ChromaDB client initialized with path: {chroma_db_path}")\n            return True\n            \n        except Exception as e:\n            logger.error(f"Failed to initialize ChromaDB: {str(e)}")\n            return False\n    \n    def create_embedding_function(self):\n        """\n        Create a custom embedding function for Google Gemini embeddings.\n        \n        Returns:\n            Callable: Embedding function for ChromaDB\n        """\n        def gemini_embedding_function(texts):\n            """\n            Generate embeddings using Google Gemini embedding model.\n            \n            Args:\n                texts (list): List of text strings to embed\n                \n            Returns:\n                list: List of embedding' additional_kwargs={} response_metadata={'id': 'msg_01SHCz7pcEgFWhcrkWBaYdPY', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 415, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--296a9eec-9824-4a75-aee7-04007ed612e2-0' usage_metadata={'input_tokens': 415, 'output_tokens': 1024, 'total_tokens': 1439, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}